// This file is generated by rust-protobuf 2.8.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `head.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_0;

#[derive(PartialEq,Clone,Default)]
pub struct req_head {
    // message fields
    pub cid: i32,
    pub token: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a req_head {
    fn default() -> &'a req_head {
        <req_head as ::protobuf::Message>::default_instance()
    }
}

impl req_head {
    pub fn new() -> req_head {
        ::std::default::Default::default()
    }

    // int32 cid = 1;


    pub fn get_cid(&self) -> i32 {
        self.cid
    }
    pub fn clear_cid(&mut self) {
        self.cid = 0;
    }

    // Param is passed by value, moved
    pub fn set_cid(&mut self, v: i32) {
        self.cid = v;
    }

    // string token = 2;


    pub fn get_token(&self) -> &str {
        &self.token
    }
    pub fn clear_token(&mut self) {
        self.token.clear();
    }

    // Param is passed by value, moved
    pub fn set_token(&mut self, v: ::std::string::String) {
        self.token = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_token(&mut self) -> &mut ::std::string::String {
        &mut self.token
    }

    // Take field
    pub fn take_token(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.token, ::std::string::String::new())
    }
}

impl ::protobuf::Message for req_head {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.cid = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.token)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.cid != 0 {
            my_size += ::protobuf::rt::value_size(1, self.cid, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.token.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.token);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.cid != 0 {
            os.write_int32(1, self.cid)?;
        }
        if !self.token.is_empty() {
            os.write_string(2, &self.token)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> req_head {
        req_head::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "cid",
                    |m: &req_head| { &m.cid },
                    |m: &mut req_head| { &mut m.cid },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "token",
                    |m: &req_head| { &m.token },
                    |m: &mut req_head| { &mut m.token },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<req_head>(
                    "req_head",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static req_head {
        static mut instance: ::protobuf::lazy::Lazy<req_head> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const req_head,
        };
        unsafe {
            instance.get(req_head::new)
        }
    }
}

impl ::protobuf::Clear for req_head {
    fn clear(&mut self) {
        self.cid = 0;
        self.token.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for req_head {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for req_head {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ack_head {
    // message fields
    pub cid: i32,
    pub code: i32,
    pub message: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ack_head {
    fn default() -> &'a ack_head {
        <ack_head as ::protobuf::Message>::default_instance()
    }
}

impl ack_head {
    pub fn new() -> ack_head {
        ::std::default::Default::default()
    }

    // int32 cid = 1;


    pub fn get_cid(&self) -> i32 {
        self.cid
    }
    pub fn clear_cid(&mut self) {
        self.cid = 0;
    }

    // Param is passed by value, moved
    pub fn set_cid(&mut self, v: i32) {
        self.cid = v;
    }

    // int32 code = 2;


    pub fn get_code(&self) -> i32 {
        self.code
    }
    pub fn clear_code(&mut self) {
        self.code = 0;
    }

    // Param is passed by value, moved
    pub fn set_code(&mut self, v: i32) {
        self.code = v;
    }

    // string message = 3;


    pub fn get_message(&self) -> &str {
        &self.message
    }
    pub fn clear_message(&mut self) {
        self.message.clear();
    }

    // Param is passed by value, moved
    pub fn set_message(&mut self, v: ::std::string::String) {
        self.message = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message(&mut self) -> &mut ::std::string::String {
        &mut self.message
    }

    // Take field
    pub fn take_message(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.message, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ack_head {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.cid = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.code = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.message)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.cid != 0 {
            my_size += ::protobuf::rt::value_size(1, self.cid, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.code != 0 {
            my_size += ::protobuf::rt::value_size(2, self.code, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.message);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.cid != 0 {
            os.write_int32(1, self.cid)?;
        }
        if self.code != 0 {
            os.write_int32(2, self.code)?;
        }
        if !self.message.is_empty() {
            os.write_string(3, &self.message)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ack_head {
        ack_head::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "cid",
                    |m: &ack_head| { &m.cid },
                    |m: &mut ack_head| { &mut m.cid },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "code",
                    |m: &ack_head| { &m.code },
                    |m: &mut ack_head| { &mut m.code },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "message",
                    |m: &ack_head| { &m.message },
                    |m: &mut ack_head| { &mut m.message },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ack_head>(
                    "ack_head",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ack_head {
        static mut instance: ::protobuf::lazy::Lazy<ack_head> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ack_head,
        };
        unsafe {
            instance.get(ack_head::new)
        }
    }
}

impl ::protobuf::Clear for ack_head {
    fn clear(&mut self) {
        self.cid = 0;
        self.code = 0;
        self.message.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ack_head {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ack_head {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct notify_head {
    // message fields
    pub cid: i32,
    pub code: i32,
    pub message: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a notify_head {
    fn default() -> &'a notify_head {
        <notify_head as ::protobuf::Message>::default_instance()
    }
}

impl notify_head {
    pub fn new() -> notify_head {
        ::std::default::Default::default()
    }

    // int32 cid = 1;


    pub fn get_cid(&self) -> i32 {
        self.cid
    }
    pub fn clear_cid(&mut self) {
        self.cid = 0;
    }

    // Param is passed by value, moved
    pub fn set_cid(&mut self, v: i32) {
        self.cid = v;
    }

    // int32 code = 2;


    pub fn get_code(&self) -> i32 {
        self.code
    }
    pub fn clear_code(&mut self) {
        self.code = 0;
    }

    // Param is passed by value, moved
    pub fn set_code(&mut self, v: i32) {
        self.code = v;
    }

    // string message = 3;


    pub fn get_message(&self) -> &str {
        &self.message
    }
    pub fn clear_message(&mut self) {
        self.message.clear();
    }

    // Param is passed by value, moved
    pub fn set_message(&mut self, v: ::std::string::String) {
        self.message = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message(&mut self) -> &mut ::std::string::String {
        &mut self.message
    }

    // Take field
    pub fn take_message(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.message, ::std::string::String::new())
    }
}

impl ::protobuf::Message for notify_head {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.cid = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.code = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.message)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.cid != 0 {
            my_size += ::protobuf::rt::value_size(1, self.cid, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.code != 0 {
            my_size += ::protobuf::rt::value_size(2, self.code, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.message);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.cid != 0 {
            os.write_int32(1, self.cid)?;
        }
        if self.code != 0 {
            os.write_int32(2, self.code)?;
        }
        if !self.message.is_empty() {
            os.write_string(3, &self.message)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> notify_head {
        notify_head::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "cid",
                    |m: &notify_head| { &m.cid },
                    |m: &mut notify_head| { &mut m.cid },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "code",
                    |m: &notify_head| { &m.code },
                    |m: &mut notify_head| { &mut m.code },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "message",
                    |m: &notify_head| { &m.message },
                    |m: &mut notify_head| { &mut m.message },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<notify_head>(
                    "notify_head",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static notify_head {
        static mut instance: ::protobuf::lazy::Lazy<notify_head> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const notify_head,
        };
        unsafe {
            instance.get(notify_head::new)
        }
    }
}

impl ::protobuf::Clear for notify_head {
    fn clear(&mut self) {
        self.cid = 0;
        self.code = 0;
        self.message.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for notify_head {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for notify_head {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\nhead.proto\x12\x04head\"2\n\x08req_head\x12\x10\n\x03cid\x18\x01\x20\
    \x01(\x05R\x03cid\x12\x14\n\x05token\x18\x02\x20\x01(\tR\x05token\"J\n\
    \x08ack_head\x12\x10\n\x03cid\x18\x01\x20\x01(\x05R\x03cid\x12\x12\n\x04\
    code\x18\x02\x20\x01(\x05R\x04code\x12\x18\n\x07message\x18\x03\x20\x01(\
    \tR\x07message\"M\n\x0bnotify_head\x12\x10\n\x03cid\x18\x01\x20\x01(\x05\
    R\x03cid\x12\x12\n\x04code\x18\x02\x20\x01(\x05R\x04code\x12\x18\n\x07me\
    ssage\x18\x03\x20\x01(\tR\x07messageJ\xb9\x05\n\x06\x12\x04\0\0\x13\x01\
    \n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x02\x08\x0c\n/\
    \n\x02\x04\0\x12\x04\x04\0\x07\x01\x1a#\x20---------------------\xe5\x85\
    \xac\xe5\x85\xb1\xe5\xa4\xb4\xe9\x83\xa8\n\n\n\n\x03\x04\0\x01\x12\x03\
    \x04\x08\x10\n\x0b\n\x04\x04\0\x02\0\x12\x03\x05\x02\x10\n\r\n\x05\x04\0\
    \x02\0\x04\x12\x04\x05\x02\x04\x12\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\
    \x05\x02\x07\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x05\x08\x0b\n\x0c\n\x05\
    \x04\0\x02\0\x03\x12\x03\x05\x0e\x0f\n\x0b\n\x04\x04\0\x02\x01\x12\x03\
    \x06\x02\x13\n\r\n\x05\x04\0\x02\x01\x04\x12\x04\x06\x02\x05\x10\n\x0c\n\
    \x05\x04\0\x02\x01\x05\x12\x03\x06\x02\x08\n\x0c\n\x05\x04\0\x02\x01\x01\
    \x12\x03\x06\t\x0e\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x06\x11\x12\n\n\
    \n\x02\x04\x01\x12\x04\t\0\r\x01\n\n\n\x03\x04\x01\x01\x12\x03\t\x08\x10\
    \n\x0b\n\x04\x04\x01\x02\0\x12\x03\n\x02\x10\n\r\n\x05\x04\x01\x02\0\x04\
    \x12\x04\n\x02\t\x12\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03\n\x02\x07\n\
    \x0c\n\x05\x04\x01\x02\0\x01\x12\x03\n\x08\x0b\n\x0c\n\x05\x04\x01\x02\0\
    \x03\x12\x03\n\x0e\x0f\n\x0b\n\x04\x04\x01\x02\x01\x12\x03\x0b\x02\x11\n\
    \r\n\x05\x04\x01\x02\x01\x04\x12\x04\x0b\x02\n\x10\n\x0c\n\x05\x04\x01\
    \x02\x01\x05\x12\x03\x0b\x02\x07\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\
    \x0b\x08\x0c\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\x0b\x0f\x10\n\x0b\n\
    \x04\x04\x01\x02\x02\x12\x03\x0c\x02\x15\n\r\n\x05\x04\x01\x02\x02\x04\
    \x12\x04\x0c\x02\x0b\x11\n\x0c\n\x05\x04\x01\x02\x02\x05\x12\x03\x0c\x02\
    \x08\n\x0c\n\x05\x04\x01\x02\x02\x01\x12\x03\x0c\t\x10\n\x0c\n\x05\x04\
    \x01\x02\x02\x03\x12\x03\x0c\x13\x14\n\n\n\x02\x04\x02\x12\x04\x0f\0\x13\
    \x01\n\n\n\x03\x04\x02\x01\x12\x03\x0f\x08\x13\n\x0b\n\x04\x04\x02\x02\0\
    \x12\x03\x10\x02\x10\n\r\n\x05\x04\x02\x02\0\x04\x12\x04\x10\x02\x0f\x15\
    \n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03\x10\x02\x07\n\x0c\n\x05\x04\x02\
    \x02\0\x01\x12\x03\x10\x08\x0b\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03\x10\
    \x0e\x0f\n\x0b\n\x04\x04\x02\x02\x01\x12\x03\x11\x02\x11\n\r\n\x05\x04\
    \x02\x02\x01\x04\x12\x04\x11\x02\x10\x10\n\x0c\n\x05\x04\x02\x02\x01\x05\
    \x12\x03\x11\x02\x07\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03\x11\x08\x0c\
    \n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03\x11\x0f\x10\n\x0b\n\x04\x04\x02\
    \x02\x02\x12\x03\x12\x02\x15\n\r\n\x05\x04\x02\x02\x02\x04\x12\x04\x12\
    \x02\x11\x11\n\x0c\n\x05\x04\x02\x02\x02\x05\x12\x03\x12\x02\x08\n\x0c\n\
    \x05\x04\x02\x02\x02\x01\x12\x03\x12\t\x10\n\x0c\n\x05\x04\x02\x02\x02\
    \x03\x12\x03\x12\x13\x14b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
