// This file is generated by rust-protobuf 2.8.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `center.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_0;

#[derive(PartialEq,Clone,Default)]
pub struct Gate2CenterReq {
    // message fields
    pub user_id: i64,
    pub message: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Gate2CenterReq {
    fn default() -> &'a Gate2CenterReq {
        <Gate2CenterReq as ::protobuf::Message>::default_instance()
    }
}

impl Gate2CenterReq {
    pub fn new() -> Gate2CenterReq {
        ::std::default::Default::default()
    }

    // int64 user_id = 1;


    pub fn get_user_id(&self) -> i64 {
        self.user_id
    }
    pub fn clear_user_id(&mut self) {
        self.user_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_user_id(&mut self, v: i64) {
        self.user_id = v;
    }

    // bytes message = 2;


    pub fn get_message(&self) -> &[u8] {
        &self.message
    }
    pub fn clear_message(&mut self) {
        self.message.clear();
    }

    // Param is passed by value, moved
    pub fn set_message(&mut self, v: ::std::vec::Vec<u8>) {
        self.message = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.message
    }

    // Take field
    pub fn take_message(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.message, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for Gate2CenterReq {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.user_id = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.message)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.user_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.user_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.message);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.user_id != 0 {
            os.write_int64(1, self.user_id)?;
        }
        if !self.message.is_empty() {
            os.write_bytes(2, &self.message)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Gate2CenterReq {
        Gate2CenterReq::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "user_id",
                    |m: &Gate2CenterReq| { &m.user_id },
                    |m: &mut Gate2CenterReq| { &mut m.user_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "message",
                    |m: &Gate2CenterReq| { &m.message },
                    |m: &mut Gate2CenterReq| { &mut m.message },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Gate2CenterReq>(
                    "Gate2CenterReq",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Gate2CenterReq {
        static mut instance: ::protobuf::lazy::Lazy<Gate2CenterReq> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Gate2CenterReq,
        };
        unsafe {
            instance.get(Gate2CenterReq::new)
        }
    }
}

impl ::protobuf::Clear for Gate2CenterReq {
    fn clear(&mut self) {
        self.user_id = 0;
        self.message.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Gate2CenterReq {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Gate2CenterReq {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Gate2CenterAck {
    // message fields
    pub can: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Gate2CenterAck {
    fn default() -> &'a Gate2CenterAck {
        <Gate2CenterAck as ::protobuf::Message>::default_instance()
    }
}

impl Gate2CenterAck {
    pub fn new() -> Gate2CenterAck {
        ::std::default::Default::default()
    }

    // bool can = 1;


    pub fn get_can(&self) -> bool {
        self.can
    }
    pub fn clear_can(&mut self) {
        self.can = false;
    }

    // Param is passed by value, moved
    pub fn set_can(&mut self, v: bool) {
        self.can = v;
    }
}

impl ::protobuf::Message for Gate2CenterAck {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.can = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.can != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.can != false {
            os.write_bool(1, self.can)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Gate2CenterAck {
        Gate2CenterAck::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "can",
                    |m: &Gate2CenterAck| { &m.can },
                    |m: &mut Gate2CenterAck| { &mut m.can },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Gate2CenterAck>(
                    "Gate2CenterAck",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Gate2CenterAck {
        static mut instance: ::protobuf::lazy::Lazy<Gate2CenterAck> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Gate2CenterAck,
        };
        unsafe {
            instance.get(Gate2CenterAck::new)
        }
    }
}

impl ::protobuf::Clear for Gate2CenterAck {
    fn clear(&mut self) {
        self.can = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Gate2CenterAck {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Gate2CenterAck {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct LoginReq {
    // message fields
    pub head: ::protobuf::SingularPtrField<super::head::req_head>,
    pub username: i64,
    pub password: ::std::string::String,
    pub verify_code: ::std::string::String,
    pub login_type: i32,
    pub nickname: ::std::string::String,
    pub avatar: ::std::string::String,
    pub invite_code: ::std::string::String,
    pub extra: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LoginReq {
    fn default() -> &'a LoginReq {
        <LoginReq as ::protobuf::Message>::default_instance()
    }
}

impl LoginReq {
    pub fn new() -> LoginReq {
        ::std::default::Default::default()
    }

    // .protocol.req_head head = 1;


    pub fn get_head(&self) -> &super::head::req_head {
        self.head.as_ref().unwrap_or_else(|| super::head::req_head::default_instance())
    }
    pub fn clear_head(&mut self) {
        self.head.clear();
    }

    pub fn has_head(&self) -> bool {
        self.head.is_some()
    }

    // Param is passed by value, moved
    pub fn set_head(&mut self, v: super::head::req_head) {
        self.head = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_head(&mut self) -> &mut super::head::req_head {
        if self.head.is_none() {
            self.head.set_default();
        }
        self.head.as_mut().unwrap()
    }

    // Take field
    pub fn take_head(&mut self) -> super::head::req_head {
        self.head.take().unwrap_or_else(|| super::head::req_head::new())
    }

    // int64 username = 2;


    pub fn get_username(&self) -> i64 {
        self.username
    }
    pub fn clear_username(&mut self) {
        self.username = 0;
    }

    // Param is passed by value, moved
    pub fn set_username(&mut self, v: i64) {
        self.username = v;
    }

    // string password = 3;


    pub fn get_password(&self) -> &str {
        &self.password
    }
    pub fn clear_password(&mut self) {
        self.password.clear();
    }

    // Param is passed by value, moved
    pub fn set_password(&mut self, v: ::std::string::String) {
        self.password = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_password(&mut self) -> &mut ::std::string::String {
        &mut self.password
    }

    // Take field
    pub fn take_password(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.password, ::std::string::String::new())
    }

    // string verify_code = 4;


    pub fn get_verify_code(&self) -> &str {
        &self.verify_code
    }
    pub fn clear_verify_code(&mut self) {
        self.verify_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_verify_code(&mut self, v: ::std::string::String) {
        self.verify_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_verify_code(&mut self) -> &mut ::std::string::String {
        &mut self.verify_code
    }

    // Take field
    pub fn take_verify_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.verify_code, ::std::string::String::new())
    }

    // int32 login_type = 5;


    pub fn get_login_type(&self) -> i32 {
        self.login_type
    }
    pub fn clear_login_type(&mut self) {
        self.login_type = 0;
    }

    // Param is passed by value, moved
    pub fn set_login_type(&mut self, v: i32) {
        self.login_type = v;
    }

    // string nickname = 6;


    pub fn get_nickname(&self) -> &str {
        &self.nickname
    }
    pub fn clear_nickname(&mut self) {
        self.nickname.clear();
    }

    // Param is passed by value, moved
    pub fn set_nickname(&mut self, v: ::std::string::String) {
        self.nickname = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_nickname(&mut self) -> &mut ::std::string::String {
        &mut self.nickname
    }

    // Take field
    pub fn take_nickname(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.nickname, ::std::string::String::new())
    }

    // string avatar = 7;


    pub fn get_avatar(&self) -> &str {
        &self.avatar
    }
    pub fn clear_avatar(&mut self) {
        self.avatar.clear();
    }

    // Param is passed by value, moved
    pub fn set_avatar(&mut self, v: ::std::string::String) {
        self.avatar = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_avatar(&mut self) -> &mut ::std::string::String {
        &mut self.avatar
    }

    // Take field
    pub fn take_avatar(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.avatar, ::std::string::String::new())
    }

    // string invite_code = 8;


    pub fn get_invite_code(&self) -> &str {
        &self.invite_code
    }
    pub fn clear_invite_code(&mut self) {
        self.invite_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_invite_code(&mut self, v: ::std::string::String) {
        self.invite_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_invite_code(&mut self) -> &mut ::std::string::String {
        &mut self.invite_code
    }

    // Take field
    pub fn take_invite_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.invite_code, ::std::string::String::new())
    }

    // string extra = 9;


    pub fn get_extra(&self) -> &str {
        &self.extra
    }
    pub fn clear_extra(&mut self) {
        self.extra.clear();
    }

    // Param is passed by value, moved
    pub fn set_extra(&mut self, v: ::std::string::String) {
        self.extra = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_extra(&mut self) -> &mut ::std::string::String {
        &mut self.extra
    }

    // Take field
    pub fn take_extra(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.extra, ::std::string::String::new())
    }
}

impl ::protobuf::Message for LoginReq {
    fn is_initialized(&self) -> bool {
        for v in &self.head {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.head)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.username = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.password)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.verify_code)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.login_type = tmp;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.nickname)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.avatar)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.invite_code)?;
                },
                9 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.extra)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.head.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.username != 0 {
            my_size += ::protobuf::rt::value_size(2, self.username, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.password.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.password);
        }
        if !self.verify_code.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.verify_code);
        }
        if self.login_type != 0 {
            my_size += ::protobuf::rt::value_size(5, self.login_type, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.nickname.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.nickname);
        }
        if !self.avatar.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.avatar);
        }
        if !self.invite_code.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.invite_code);
        }
        if !self.extra.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.extra);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.head.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.username != 0 {
            os.write_int64(2, self.username)?;
        }
        if !self.password.is_empty() {
            os.write_string(3, &self.password)?;
        }
        if !self.verify_code.is_empty() {
            os.write_string(4, &self.verify_code)?;
        }
        if self.login_type != 0 {
            os.write_int32(5, self.login_type)?;
        }
        if !self.nickname.is_empty() {
            os.write_string(6, &self.nickname)?;
        }
        if !self.avatar.is_empty() {
            os.write_string(7, &self.avatar)?;
        }
        if !self.invite_code.is_empty() {
            os.write_string(8, &self.invite_code)?;
        }
        if !self.extra.is_empty() {
            os.write_string(9, &self.extra)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LoginReq {
        LoginReq::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::head::req_head>>(
                    "head",
                    |m: &LoginReq| { &m.head },
                    |m: &mut LoginReq| { &mut m.head },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "username",
                    |m: &LoginReq| { &m.username },
                    |m: &mut LoginReq| { &mut m.username },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "password",
                    |m: &LoginReq| { &m.password },
                    |m: &mut LoginReq| { &mut m.password },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "verify_code",
                    |m: &LoginReq| { &m.verify_code },
                    |m: &mut LoginReq| { &mut m.verify_code },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "login_type",
                    |m: &LoginReq| { &m.login_type },
                    |m: &mut LoginReq| { &mut m.login_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "nickname",
                    |m: &LoginReq| { &m.nickname },
                    |m: &mut LoginReq| { &mut m.nickname },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "avatar",
                    |m: &LoginReq| { &m.avatar },
                    |m: &mut LoginReq| { &mut m.avatar },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "invite_code",
                    |m: &LoginReq| { &m.invite_code },
                    |m: &mut LoginReq| { &mut m.invite_code },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "extra",
                    |m: &LoginReq| { &m.extra },
                    |m: &mut LoginReq| { &mut m.extra },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<LoginReq>(
                    "LoginReq",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static LoginReq {
        static mut instance: ::protobuf::lazy::Lazy<LoginReq> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const LoginReq,
        };
        unsafe {
            instance.get(LoginReq::new)
        }
    }
}

impl ::protobuf::Clear for LoginReq {
    fn clear(&mut self) {
        self.head.clear();
        self.username = 0;
        self.password.clear();
        self.verify_code.clear();
        self.login_type = 0;
        self.nickname.clear();
        self.avatar.clear();
        self.invite_code.clear();
        self.extra.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LoginReq {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LoginReq {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct LoginAck {
    // message fields
    pub head: ::protobuf::SingularPtrField<super::head::ack_head>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LoginAck {
    fn default() -> &'a LoginAck {
        <LoginAck as ::protobuf::Message>::default_instance()
    }
}

impl LoginAck {
    pub fn new() -> LoginAck {
        ::std::default::Default::default()
    }

    // .protocol.ack_head head = 1;


    pub fn get_head(&self) -> &super::head::ack_head {
        self.head.as_ref().unwrap_or_else(|| super::head::ack_head::default_instance())
    }
    pub fn clear_head(&mut self) {
        self.head.clear();
    }

    pub fn has_head(&self) -> bool {
        self.head.is_some()
    }

    // Param is passed by value, moved
    pub fn set_head(&mut self, v: super::head::ack_head) {
        self.head = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_head(&mut self) -> &mut super::head::ack_head {
        if self.head.is_none() {
            self.head.set_default();
        }
        self.head.as_mut().unwrap()
    }

    // Take field
    pub fn take_head(&mut self) -> super::head::ack_head {
        self.head.take().unwrap_or_else(|| super::head::ack_head::new())
    }
}

impl ::protobuf::Message for LoginAck {
    fn is_initialized(&self) -> bool {
        for v in &self.head {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.head)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.head.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.head.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LoginAck {
        LoginAck::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::head::ack_head>>(
                    "head",
                    |m: &LoginAck| { &m.head },
                    |m: &mut LoginAck| { &mut m.head },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<LoginAck>(
                    "LoginAck",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static LoginAck {
        static mut instance: ::protobuf::lazy::Lazy<LoginAck> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const LoginAck,
        };
        unsafe {
            instance.get(LoginAck::new)
        }
    }
}

impl ::protobuf::Clear for LoginAck {
    fn clear(&mut self) {
        self.head.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LoginAck {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LoginAck {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct LogoutReq {
    // message fields
    pub head: ::protobuf::SingularPtrField<super::head::req_head>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LogoutReq {
    fn default() -> &'a LogoutReq {
        <LogoutReq as ::protobuf::Message>::default_instance()
    }
}

impl LogoutReq {
    pub fn new() -> LogoutReq {
        ::std::default::Default::default()
    }

    // .protocol.req_head head = 1;


    pub fn get_head(&self) -> &super::head::req_head {
        self.head.as_ref().unwrap_or_else(|| super::head::req_head::default_instance())
    }
    pub fn clear_head(&mut self) {
        self.head.clear();
    }

    pub fn has_head(&self) -> bool {
        self.head.is_some()
    }

    // Param is passed by value, moved
    pub fn set_head(&mut self, v: super::head::req_head) {
        self.head = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_head(&mut self) -> &mut super::head::req_head {
        if self.head.is_none() {
            self.head.set_default();
        }
        self.head.as_mut().unwrap()
    }

    // Take field
    pub fn take_head(&mut self) -> super::head::req_head {
        self.head.take().unwrap_or_else(|| super::head::req_head::new())
    }
}

impl ::protobuf::Message for LogoutReq {
    fn is_initialized(&self) -> bool {
        for v in &self.head {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.head)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.head.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.head.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LogoutReq {
        LogoutReq::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::head::req_head>>(
                    "head",
                    |m: &LogoutReq| { &m.head },
                    |m: &mut LogoutReq| { &mut m.head },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<LogoutReq>(
                    "LogoutReq",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static LogoutReq {
        static mut instance: ::protobuf::lazy::Lazy<LogoutReq> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const LogoutReq,
        };
        unsafe {
            instance.get(LogoutReq::new)
        }
    }
}

impl ::protobuf::Clear for LogoutReq {
    fn clear(&mut self) {
        self.head.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LogoutReq {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LogoutReq {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct LogoutAck {
    // message fields
    pub head: ::protobuf::SingularPtrField<super::head::ack_head>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LogoutAck {
    fn default() -> &'a LogoutAck {
        <LogoutAck as ::protobuf::Message>::default_instance()
    }
}

impl LogoutAck {
    pub fn new() -> LogoutAck {
        ::std::default::Default::default()
    }

    // .protocol.ack_head head = 1;


    pub fn get_head(&self) -> &super::head::ack_head {
        self.head.as_ref().unwrap_or_else(|| super::head::ack_head::default_instance())
    }
    pub fn clear_head(&mut self) {
        self.head.clear();
    }

    pub fn has_head(&self) -> bool {
        self.head.is_some()
    }

    // Param is passed by value, moved
    pub fn set_head(&mut self, v: super::head::ack_head) {
        self.head = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_head(&mut self) -> &mut super::head::ack_head {
        if self.head.is_none() {
            self.head.set_default();
        }
        self.head.as_mut().unwrap()
    }

    // Take field
    pub fn take_head(&mut self) -> super::head::ack_head {
        self.head.take().unwrap_or_else(|| super::head::ack_head::new())
    }
}

impl ::protobuf::Message for LogoutAck {
    fn is_initialized(&self) -> bool {
        for v in &self.head {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.head)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.head.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.head.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LogoutAck {
        LogoutAck::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::head::ack_head>>(
                    "head",
                    |m: &LogoutAck| { &m.head },
                    |m: &mut LogoutAck| { &mut m.head },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<LogoutAck>(
                    "LogoutAck",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static LogoutAck {
        static mut instance: ::protobuf::lazy::Lazy<LogoutAck> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const LogoutAck,
        };
        unsafe {
            instance.get(LogoutAck::new)
        }
    }
}

impl ::protobuf::Clear for LogoutAck {
    fn clear(&mut self) {
        self.head.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LogoutAck {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LogoutAck {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct HeartBeatReq {
    // message fields
    pub head: ::protobuf::SingularPtrField<super::head::req_head>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a HeartBeatReq {
    fn default() -> &'a HeartBeatReq {
        <HeartBeatReq as ::protobuf::Message>::default_instance()
    }
}

impl HeartBeatReq {
    pub fn new() -> HeartBeatReq {
        ::std::default::Default::default()
    }

    // .protocol.req_head head = 1;


    pub fn get_head(&self) -> &super::head::req_head {
        self.head.as_ref().unwrap_or_else(|| super::head::req_head::default_instance())
    }
    pub fn clear_head(&mut self) {
        self.head.clear();
    }

    pub fn has_head(&self) -> bool {
        self.head.is_some()
    }

    // Param is passed by value, moved
    pub fn set_head(&mut self, v: super::head::req_head) {
        self.head = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_head(&mut self) -> &mut super::head::req_head {
        if self.head.is_none() {
            self.head.set_default();
        }
        self.head.as_mut().unwrap()
    }

    // Take field
    pub fn take_head(&mut self) -> super::head::req_head {
        self.head.take().unwrap_or_else(|| super::head::req_head::new())
    }
}

impl ::protobuf::Message for HeartBeatReq {
    fn is_initialized(&self) -> bool {
        for v in &self.head {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.head)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.head.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.head.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> HeartBeatReq {
        HeartBeatReq::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::head::req_head>>(
                    "head",
                    |m: &HeartBeatReq| { &m.head },
                    |m: &mut HeartBeatReq| { &mut m.head },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<HeartBeatReq>(
                    "HeartBeatReq",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static HeartBeatReq {
        static mut instance: ::protobuf::lazy::Lazy<HeartBeatReq> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const HeartBeatReq,
        };
        unsafe {
            instance.get(HeartBeatReq::new)
        }
    }
}

impl ::protobuf::Clear for HeartBeatReq {
    fn clear(&mut self) {
        self.head.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for HeartBeatReq {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HeartBeatReq {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct HeartBeatAck {
    // message fields
    pub head: ::protobuf::SingularPtrField<super::head::ack_head>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a HeartBeatAck {
    fn default() -> &'a HeartBeatAck {
        <HeartBeatAck as ::protobuf::Message>::default_instance()
    }
}

impl HeartBeatAck {
    pub fn new() -> HeartBeatAck {
        ::std::default::Default::default()
    }

    // .protocol.ack_head head = 1;


    pub fn get_head(&self) -> &super::head::ack_head {
        self.head.as_ref().unwrap_or_else(|| super::head::ack_head::default_instance())
    }
    pub fn clear_head(&mut self) {
        self.head.clear();
    }

    pub fn has_head(&self) -> bool {
        self.head.is_some()
    }

    // Param is passed by value, moved
    pub fn set_head(&mut self, v: super::head::ack_head) {
        self.head = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_head(&mut self) -> &mut super::head::ack_head {
        if self.head.is_none() {
            self.head.set_default();
        }
        self.head.as_mut().unwrap()
    }

    // Take field
    pub fn take_head(&mut self) -> super::head::ack_head {
        self.head.take().unwrap_or_else(|| super::head::ack_head::new())
    }
}

impl ::protobuf::Message for HeartBeatAck {
    fn is_initialized(&self) -> bool {
        for v in &self.head {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.head)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.head.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.head.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> HeartBeatAck {
        HeartBeatAck::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::head::ack_head>>(
                    "head",
                    |m: &HeartBeatAck| { &m.head },
                    |m: &mut HeartBeatAck| { &mut m.head },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<HeartBeatAck>(
                    "HeartBeatAck",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static HeartBeatAck {
        static mut instance: ::protobuf::lazy::Lazy<HeartBeatAck> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const HeartBeatAck,
        };
        unsafe {
            instance.get(HeartBeatAck::new)
        }
    }
}

impl ::protobuf::Clear for HeartBeatAck {
    fn clear(&mut self) {
        self.head.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for HeartBeatAck {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HeartBeatAck {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Center2GateReq {
    // message fields
    pub user_id: ::std::vec::Vec<i64>,
    pub message: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Center2GateReq {
    fn default() -> &'a Center2GateReq {
        <Center2GateReq as ::protobuf::Message>::default_instance()
    }
}

impl Center2GateReq {
    pub fn new() -> Center2GateReq {
        ::std::default::Default::default()
    }

    // repeated int64 user_id = 1;


    pub fn get_user_id(&self) -> &[i64] {
        &self.user_id
    }
    pub fn clear_user_id(&mut self) {
        self.user_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_user_id(&mut self, v: ::std::vec::Vec<i64>) {
        self.user_id = v;
    }

    // Mutable pointer to the field.
    pub fn mut_user_id(&mut self) -> &mut ::std::vec::Vec<i64> {
        &mut self.user_id
    }

    // Take field
    pub fn take_user_id(&mut self) -> ::std::vec::Vec<i64> {
        ::std::mem::replace(&mut self.user_id, ::std::vec::Vec::new())
    }

    // bytes message = 2;


    pub fn get_message(&self) -> &[u8] {
        &self.message
    }
    pub fn clear_message(&mut self) {
        self.message.clear();
    }

    // Param is passed by value, moved
    pub fn set_message(&mut self, v: ::std::vec::Vec<u8>) {
        self.message = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.message
    }

    // Take field
    pub fn take_message(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.message, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for Center2GateReq {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_int64_into(wire_type, is, &mut self.user_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.message)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.user_id {
            my_size += ::protobuf::rt::value_size(1, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.message);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.user_id {
            os.write_int64(1, *v)?;
        };
        if !self.message.is_empty() {
            os.write_bytes(2, &self.message)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Center2GateReq {
        Center2GateReq::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "user_id",
                    |m: &Center2GateReq| { &m.user_id },
                    |m: &mut Center2GateReq| { &mut m.user_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "message",
                    |m: &Center2GateReq| { &m.message },
                    |m: &mut Center2GateReq| { &mut m.message },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Center2GateReq>(
                    "Center2GateReq",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Center2GateReq {
        static mut instance: ::protobuf::lazy::Lazy<Center2GateReq> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Center2GateReq,
        };
        unsafe {
            instance.get(Center2GateReq::new)
        }
    }
}

impl ::protobuf::Clear for Center2GateReq {
    fn clear(&mut self) {
        self.user_id.clear();
        self.message.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Center2GateReq {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Center2GateReq {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Center2GateAck {
    // message fields
    pub user_id: ::std::vec::Vec<i64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Center2GateAck {
    fn default() -> &'a Center2GateAck {
        <Center2GateAck as ::protobuf::Message>::default_instance()
    }
}

impl Center2GateAck {
    pub fn new() -> Center2GateAck {
        ::std::default::Default::default()
    }

    // repeated int64 user_id = 1;


    pub fn get_user_id(&self) -> &[i64] {
        &self.user_id
    }
    pub fn clear_user_id(&mut self) {
        self.user_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_user_id(&mut self, v: ::std::vec::Vec<i64>) {
        self.user_id = v;
    }

    // Mutable pointer to the field.
    pub fn mut_user_id(&mut self) -> &mut ::std::vec::Vec<i64> {
        &mut self.user_id
    }

    // Take field
    pub fn take_user_id(&mut self) -> ::std::vec::Vec<i64> {
        ::std::mem::replace(&mut self.user_id, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for Center2GateAck {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_int64_into(wire_type, is, &mut self.user_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.user_id {
            my_size += ::protobuf::rt::value_size(1, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.user_id {
            os.write_int64(1, *v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Center2GateAck {
        Center2GateAck::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "user_id",
                    |m: &Center2GateAck| { &m.user_id },
                    |m: &mut Center2GateAck| { &mut m.user_id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Center2GateAck>(
                    "Center2GateAck",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Center2GateAck {
        static mut instance: ::protobuf::lazy::Lazy<Center2GateAck> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Center2GateAck,
        };
        unsafe {
            instance.get(Center2GateAck::new)
        }
    }
}

impl ::protobuf::Clear for Center2GateAck {
    fn clear(&mut self) {
        self.user_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Center2GateAck {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Center2GateAck {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CenterKickUserReq {
    // message fields
    pub user_id: ::std::vec::Vec<i64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CenterKickUserReq {
    fn default() -> &'a CenterKickUserReq {
        <CenterKickUserReq as ::protobuf::Message>::default_instance()
    }
}

impl CenterKickUserReq {
    pub fn new() -> CenterKickUserReq {
        ::std::default::Default::default()
    }

    // repeated int64 user_id = 1;


    pub fn get_user_id(&self) -> &[i64] {
        &self.user_id
    }
    pub fn clear_user_id(&mut self) {
        self.user_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_user_id(&mut self, v: ::std::vec::Vec<i64>) {
        self.user_id = v;
    }

    // Mutable pointer to the field.
    pub fn mut_user_id(&mut self) -> &mut ::std::vec::Vec<i64> {
        &mut self.user_id
    }

    // Take field
    pub fn take_user_id(&mut self) -> ::std::vec::Vec<i64> {
        ::std::mem::replace(&mut self.user_id, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for CenterKickUserReq {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_int64_into(wire_type, is, &mut self.user_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.user_id {
            my_size += ::protobuf::rt::value_size(1, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.user_id {
            os.write_int64(1, *v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CenterKickUserReq {
        CenterKickUserReq::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "user_id",
                    |m: &CenterKickUserReq| { &m.user_id },
                    |m: &mut CenterKickUserReq| { &mut m.user_id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CenterKickUserReq>(
                    "CenterKickUserReq",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CenterKickUserReq {
        static mut instance: ::protobuf::lazy::Lazy<CenterKickUserReq> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CenterKickUserReq,
        };
        unsafe {
            instance.get(CenterKickUserReq::new)
        }
    }
}

impl ::protobuf::Clear for CenterKickUserReq {
    fn clear(&mut self) {
        self.user_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CenterKickUserReq {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CenterKickUserReq {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CenterKickUserAck {
    // message fields
    pub user_id: ::std::vec::Vec<i64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CenterKickUserAck {
    fn default() -> &'a CenterKickUserAck {
        <CenterKickUserAck as ::protobuf::Message>::default_instance()
    }
}

impl CenterKickUserAck {
    pub fn new() -> CenterKickUserAck {
        ::std::default::Default::default()
    }

    // repeated int64 user_id = 1;


    pub fn get_user_id(&self) -> &[i64] {
        &self.user_id
    }
    pub fn clear_user_id(&mut self) {
        self.user_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_user_id(&mut self, v: ::std::vec::Vec<i64>) {
        self.user_id = v;
    }

    // Mutable pointer to the field.
    pub fn mut_user_id(&mut self) -> &mut ::std::vec::Vec<i64> {
        &mut self.user_id
    }

    // Take field
    pub fn take_user_id(&mut self) -> ::std::vec::Vec<i64> {
        ::std::mem::replace(&mut self.user_id, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for CenterKickUserAck {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_int64_into(wire_type, is, &mut self.user_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.user_id {
            my_size += ::protobuf::rt::value_size(1, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.user_id {
            os.write_int64(1, *v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CenterKickUserAck {
        CenterKickUserAck::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "user_id",
                    |m: &CenterKickUserAck| { &m.user_id },
                    |m: &mut CenterKickUserAck| { &mut m.user_id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CenterKickUserAck>(
                    "CenterKickUserAck",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CenterKickUserAck {
        static mut instance: ::protobuf::lazy::Lazy<CenterKickUserAck> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CenterKickUserAck,
        };
        unsafe {
            instance.get(CenterKickUserAck::new)
        }
    }
}

impl ::protobuf::Clear for CenterKickUserAck {
    fn clear(&mut self) {
        self.user_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CenterKickUserAck {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CenterKickUserAck {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0ccenter.proto\x12\x08protocol\x1a\nhead.proto\"C\n\x0eGate2CenterRe\
    q\x12\x17\n\x07user_id\x18\x01\x20\x01(\x03R\x06userId\x12\x18\n\x07mess\
    age\x18\x02\x20\x01(\x0cR\x07message\"\"\n\x0eGate2CenterAck\x12\x10\n\
    \x03can\x18\x01\x20\x01(\x08R\x03can\"\x95\x02\n\x08LoginReq\x12&\n\x04h\
    ead\x18\x01\x20\x01(\x0b2\x12.protocol.req_headR\x04head\x12\x1a\n\x08us\
    ername\x18\x02\x20\x01(\x03R\x08username\x12\x1a\n\x08password\x18\x03\
    \x20\x01(\tR\x08password\x12\x1f\n\x0bverify_code\x18\x04\x20\x01(\tR\nv\
    erifyCode\x12\x1d\n\nlogin_type\x18\x05\x20\x01(\x05R\tloginType\x12\x1a\
    \n\x08nickname\x18\x06\x20\x01(\tR\x08nickname\x12\x16\n\x06avatar\x18\
    \x07\x20\x01(\tR\x06avatar\x12\x1f\n\x0binvite_code\x18\x08\x20\x01(\tR\
    \ninviteCode\x12\x14\n\x05extra\x18\t\x20\x01(\tR\x05extra\"2\n\x08Login\
    Ack\x12&\n\x04head\x18\x01\x20\x01(\x0b2\x12.protocol.ack_headR\x04head\
    \"3\n\tLogoutReq\x12&\n\x04head\x18\x01\x20\x01(\x0b2\x12.protocol.req_h\
    eadR\x04head\"3\n\tLogoutAck\x12&\n\x04head\x18\x01\x20\x01(\x0b2\x12.pr\
    otocol.ack_headR\x04head\"6\n\x0cHeartBeatReq\x12&\n\x04head\x18\x01\x20\
    \x01(\x0b2\x12.protocol.req_headR\x04head\"6\n\x0cHeartBeatAck\x12&\n\
    \x04head\x18\x01\x20\x01(\x0b2\x12.protocol.ack_headR\x04head\"C\n\x0eCe\
    nter2GateReq\x12\x17\n\x07user_id\x18\x01\x20\x03(\x03R\x06userId\x12\
    \x18\n\x07message\x18\x02\x20\x01(\x0cR\x07message\")\n\x0eCenter2GateAc\
    k\x12\x17\n\x07user_id\x18\x01\x20\x03(\x03R\x06userId\",\n\x11CenterKic\
    kUserReq\x12\x17\n\x07user_id\x18\x01\x20\x03(\x03R\x06userId\",\n\x11Ce\
    nterKickUserAck\x12\x17\n\x07user_id\x18\x01\x20\x03(\x03R\x06userId2\
    \xf8\x01\n\x0bGate2Center\x12H\n\x12Gate2CenterMessage\x12\x18.protocol.\
    Gate2CenterReq\x1a\x18.protocol.Gate2CenterAck\x12/\n\x05Login\x12\x12.p\
    rotocol.LoginReq\x1a\x12.protocol.LoginAck\x121\n\x06Logout\x12\x12.prot\
    ocol.LoginAck\x1a\x13.protocol.LogoutAck\x12;\n\tHeartBeat\x12\x16.proto\
    col.HeartBeatReq\x1a\x16.protocol.HeartBeatAck2\x9e\x01\n\x0bCenter2Gate\
    \x12H\n\x12Center2GateMessage\x12\x18.protocol.Center2GateReq\x1a\x18.pr\
    otocol.Center2GateAck\x12E\n\tKickUsers\x12\x1b.protocol.CenterKickUserR\
    eq\x1a\x1b.protocol.CenterKickUserAckJ\xe4\x14\n\x06\x12\x04\0\0L\x01\n\
    \x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x02\x08\x10\n\t\n\
    \x02\x03\0\x12\x03\x04\x07\x13\n\n\n\x02\x06\0\x12\x04\x06\0\x0c\x01\n\n\
    \n\x03\x06\0\x01\x12\x03\x06\x08\x13\n+\n\x04\x06\0\x02\0\x12\x04\x07\
    \x02\x08\x1f\"\x1d\xe5\xae\xa2\xe6\x88\xb7\xe7\xab\xaf\x20-\x20\xe4\xb8\
    \xad\xe5\xbf\x83\xe6\x9c\x8d\xe5\x8a\xa1\xe5\x99\xa8\r\n\n\x0c\n\x05\x06\
    \0\x02\0\x01\x12\x03\x07\x06\x18\n\x0c\n\x05\x06\0\x02\0\x02\x12\x03\x07\
    \x19'\n\x0c\n\x05\x06\0\x02\0\x03\x12\x03\x08\x0f\x1d\n\x1e\n\x04\x06\0\
    \x02\x01\x12\x03\t\x02)\"\x11\xe5\xae\xa2\xe6\x88\xb7\xe7\xab\xaf\xe7\
    \x99\xbb\xe5\xbd\x95\r\n\n\x0c\n\x05\x06\0\x02\x01\x01\x12\x03\t\x06\x0b\
    \n\x0c\n\x05\x06\0\x02\x01\x02\x12\x03\t\x0c\x14\n\x0c\n\x05\x06\0\x02\
    \x01\x03\x12\x03\t\x1f'\n\x1e\n\x04\x06\0\x02\x02\x12\x03\n\x02+\"\x11\
    \xe5\xae\xa2\xe6\x88\xb7\xe7\xab\xaf\xe7\x99\xbb\xe5\x87\xba\r\n\n\x0c\n\
    \x05\x06\0\x02\x02\x01\x12\x03\n\x06\x0c\n\x0c\n\x05\x06\0\x02\x02\x02\
    \x12\x03\n\r\x15\n\x0c\n\x05\x06\0\x02\x02\x03\x12\x03\n\x20)\n\x15\n\
    \x04\x06\0\x02\x03\x12\x03\x0b\x025\"\x08\xe5\xbf\x83\xe8\xb7\xb3\r\n\n\
    \x0c\n\x05\x06\0\x02\x03\x01\x12\x03\x0b\x06\x0f\n\x0c\n\x05\x06\0\x02\
    \x03\x02\x12\x03\x0b\x10\x1c\n\x0c\n\x05\x06\0\x02\x03\x03\x12\x03\x0b'3\
    \n\n\n\x02\x04\0\x12\x04\x0e\0\x11\x01\n\n\n\x03\x04\0\x01\x12\x03\x0e\
    \x08\x16\n\x17\n\x04\x04\0\x02\0\x12\x03\x0f\x02\x14\"\n\xe7\x94\xa8\xe6\
    \x88\xb7id\r\n\n\r\n\x05\x04\0\x02\0\x04\x12\x04\x0f\x02\x0e\x18\n\x0c\n\
    \x05\x04\0\x02\0\x05\x12\x03\x0f\x02\x07\n\x0c\n\x05\x04\0\x02\0\x01\x12\
    \x03\x0f\x08\x0f\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x0f\x12\x13\n\x18\n\
    \x04\x04\0\x02\x01\x12\x03\x10\x02\x14\"\x0b\xe6\xb6\x88\xe6\x81\xaf\xe4\
    \xbd\x93\r\n\n\r\n\x05\x04\0\x02\x01\x04\x12\x04\x10\x02\x0f\x14\n\x0c\n\
    \x05\x04\0\x02\x01\x05\x12\x03\x10\x02\x07\n\x0c\n\x05\x04\0\x02\x01\x01\
    \x12\x03\x10\x08\x0f\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x10\x12\x13\n\
    \n\n\x02\x04\x01\x12\x04\x13\0\x15\x01\n\n\n\x03\x04\x01\x01\x12\x03\x13\
    \x08\x16\n\x1b\n\x04\x04\x01\x02\0\x12\x03\x14\x02\x0f\"\x0e\xe6\x89\xa7\
    \xe8\xa1\x8c\xe7\xbb\x93\xe6\x9e\x9c\r\n\n\r\n\x05\x04\x01\x02\0\x04\x12\
    \x04\x14\x02\x13\x18\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03\x14\x02\x06\n\
    \x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x14\x07\n\n\x0c\n\x05\x04\x01\x02\0\
    \x03\x12\x03\x14\r\x0e\n\n\n\x02\x04\x02\x12\x04\x17\0!\x01\n\n\n\x03\
    \x04\x02\x01\x12\x03\x17\x08\x10\n\x15\n\x04\x04\x02\x02\0\x12\x03\x18\
    \x02\x1d\"\x08\x20token\r\n\n\r\n\x05\x04\x02\x02\0\x04\x12\x04\x18\x02\
    \x17\x12\n\x0c\n\x05\x04\x02\x02\0\x06\x12\x03\x18\x02\x13\n\x0c\n\x05\
    \x04\x02\x02\0\x01\x12\x03\x18\x14\x18\n\x0c\n\x05\x04\x02\x02\0\x03\x12\
    \x03\x18\x1b\x1c\n\x18\n\x04\x04\x02\x02\x01\x12\x03\x19\x02\x15\"\x0b\
    \xe7\x94\xa8\xe6\x88\xb7\xe5\x90\x8d\r\n\n\r\n\x05\x04\x02\x02\x01\x04\
    \x12\x04\x19\x02\x18\x1d\n\x0c\n\x05\x04\x02\x02\x01\x05\x12\x03\x19\x02\
    \x07\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03\x19\x08\x10\n\x0c\n\x05\x04\
    \x02\x02\x01\x03\x12\x03\x19\x13\x14\n\x15\n\x04\x04\x02\x02\x02\x12\x03\
    \x1a\x02\x16\"\x08\xe5\xaf\x86\xe7\xa0\x81\r\n\n\r\n\x05\x04\x02\x02\x02\
    \x04\x12\x04\x1a\x02\x19\x15\n\x0c\n\x05\x04\x02\x02\x02\x05\x12\x03\x1a\
    \x02\x08\n\x0c\n\x05\x04\x02\x02\x02\x01\x12\x03\x1a\t\x11\n\x0c\n\x05\
    \x04\x02\x02\x02\x03\x12\x03\x1a\x14\x15\n\x18\n\x04\x04\x02\x02\x03\x12\
    \x03\x1b\x02\x19\"\x0b\xe9\xaa\x8c\xe8\xaf\x81\xe7\xa0\x81\r\n\n\r\n\x05\
    \x04\x02\x02\x03\x04\x12\x04\x1b\x02\x1a\x16\n\x0c\n\x05\x04\x02\x02\x03\
    \x05\x12\x03\x1b\x02\x08\n\x0c\n\x05\x04\x02\x02\x03\x01\x12\x03\x1b\t\
    \x14\n\x0c\n\x05\x04\x02\x02\x03\x03\x12\x03\x1b\x17\x18\n\x1b\n\x04\x04\
    \x02\x02\x04\x12\x03\x1c\x02\x17\"\x0e\xe7\x99\xbb\xe5\xbd\x95\xe7\xb1\
    \xbb\xe5\x9e\x8b\r\n\n\r\n\x05\x04\x02\x02\x04\x04\x12\x04\x1c\x02\x1b\
    \x19\n\x0c\n\x05\x04\x02\x02\x04\x05\x12\x03\x1c\x02\x07\n\x0c\n\x05\x04\
    \x02\x02\x04\x01\x12\x03\x1c\x08\x12\n\x0c\n\x05\x04\x02\x02\x04\x03\x12\
    \x03\x1c\x15\x16\n\x15\n\x04\x04\x02\x02\x05\x12\x03\x1d\x02\x16\"\x08\
    \xe6\x98\xb5\xe7\xa7\xb0\r\n\n\r\n\x05\x04\x02\x02\x05\x04\x12\x04\x1d\
    \x02\x1c\x17\n\x0c\n\x05\x04\x02\x02\x05\x05\x12\x03\x1d\x02\x08\n\x0c\n\
    \x05\x04\x02\x02\x05\x01\x12\x03\x1d\t\x11\n\x0c\n\x05\x04\x02\x02\x05\
    \x03\x12\x03\x1d\x14\x15\n\x15\n\x04\x04\x02\x02\x06\x12\x03\x1e\x02\x14\
    \"\x08\xe5\xa4\xb4\xe5\x83\x8f\r\n\n\r\n\x05\x04\x02\x02\x06\x04\x12\x04\
    \x1e\x02\x1d\x16\n\x0c\n\x05\x04\x02\x02\x06\x05\x12\x03\x1e\x02\x08\n\
    \x0c\n\x05\x04\x02\x02\x06\x01\x12\x03\x1e\t\x0f\n\x0c\n\x05\x04\x02\x02\
    \x06\x03\x12\x03\x1e\x12\x13\n\x18\n\x04\x04\x02\x02\x07\x12\x03\x1f\x02\
    \x19\"\x0b\xe9\x82\x80\xe8\xaf\xb7\xe7\xa0\x81\r\n\n\r\n\x05\x04\x02\x02\
    \x07\x04\x12\x04\x1f\x02\x1e\x14\n\x0c\n\x05\x04\x02\x02\x07\x05\x12\x03\
    \x1f\x02\x08\n\x0c\n\x05\x04\x02\x02\x07\x01\x12\x03\x1f\t\x14\n\x0c\n\
    \x05\x04\x02\x02\x07\x03\x12\x03\x1f\x17\x18\n\x1b\n\x04\x04\x02\x02\x08\
    \x12\x03\x20\x02\x13\"\x0e\xe6\x89\xa9\xe5\xb1\x95\xe5\xad\x97\xe6\xae\
    \xb5\r\n\n\r\n\x05\x04\x02\x02\x08\x04\x12\x04\x20\x02\x1f\x19\n\x0c\n\
    \x05\x04\x02\x02\x08\x05\x12\x03\x20\x02\x08\n\x0c\n\x05\x04\x02\x02\x08\
    \x01\x12\x03\x20\t\x0e\n\x0c\n\x05\x04\x02\x02\x08\x03\x12\x03\x20\x11\
    \x12\n\n\n\x02\x04\x03\x12\x04#\0%\x01\n\n\n\x03\x04\x03\x01\x12\x03#\
    \x08\x10\n\x15\n\x04\x04\x03\x02\0\x12\x03$\x02\x1d\"\x08\x20token\r\n\n\
    \r\n\x05\x04\x03\x02\0\x04\x12\x04$\x02#\x12\n\x0c\n\x05\x04\x03\x02\0\
    \x06\x12\x03$\x02\x13\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03$\x14\x18\n\
    \x0c\n\x05\x04\x03\x02\0\x03\x12\x03$\x1b\x1c\n\n\n\x02\x04\x04\x12\x04'\
    \0)\x01\n\n\n\x03\x04\x04\x01\x12\x03'\x08\x11\n\x15\n\x04\x04\x04\x02\0\
    \x12\x03(\x02\x1d\"\x08\x20token\r\n\n\r\n\x05\x04\x04\x02\0\x04\x12\x04\
    (\x02'\x13\n\x0c\n\x05\x04\x04\x02\0\x06\x12\x03(\x02\x13\n\x0c\n\x05\
    \x04\x04\x02\0\x01\x12\x03(\x14\x18\n\x0c\n\x05\x04\x04\x02\0\x03\x12\
    \x03(\x1b\x1c\n\n\n\x02\x04\x05\x12\x04+\0-\x01\n\n\n\x03\x04\x05\x01\
    \x12\x03+\x08\x11\n\x15\n\x04\x04\x05\x02\0\x12\x03,\x02\x1d\"\x08\x20to\
    ken\r\n\n\r\n\x05\x04\x05\x02\0\x04\x12\x04,\x02+\x13\n\x0c\n\x05\x04\
    \x05\x02\0\x06\x12\x03,\x02\x13\n\x0c\n\x05\x04\x05\x02\0\x01\x12\x03,\
    \x14\x18\n\x0c\n\x05\x04\x05\x02\0\x03\x12\x03,\x1b\x1c\n\n\n\x02\x04\
    \x06\x12\x04/\01\x01\n\n\n\x03\x04\x06\x01\x12\x03/\x08\x14\n\x15\n\x04\
    \x04\x06\x02\0\x12\x030\x02\x1d\"\x08\x20token\r\n\n\r\n\x05\x04\x06\x02\
    \0\x04\x12\x040\x02/\x16\n\x0c\n\x05\x04\x06\x02\0\x06\x12\x030\x02\x13\
    \n\x0c\n\x05\x04\x06\x02\0\x01\x12\x030\x14\x18\n\x0c\n\x05\x04\x06\x02\
    \0\x03\x12\x030\x1b\x1c\n\n\n\x02\x04\x07\x12\x043\05\x01\n\n\n\x03\x04\
    \x07\x01\x12\x033\x08\x14\n\x15\n\x04\x04\x07\x02\0\x12\x034\x02\x1d\"\
    \x08\x20token\r\n\n\r\n\x05\x04\x07\x02\0\x04\x12\x044\x023\x16\n\x0c\n\
    \x05\x04\x07\x02\0\x06\x12\x034\x02\x13\n\x0c\n\x05\x04\x07\x02\0\x01\
    \x12\x034\x14\x18\n\x0c\n\x05\x04\x07\x02\0\x03\x12\x034\x1b\x1c\n\n\n\
    \x02\x06\x01\x12\x047\0;\x01\n\n\n\x03\x06\x01\x01\x12\x037\x08\x13\n)\n\
    \x04\x06\x01\x02\0\x12\x048\x029\x1f\"\x1b\xe4\xb8\xad\xe5\xbf\x83\xe6\
    \x9c\x8d\xe5\x8a\xa1\xe5\x99\xa8-\xe5\xae\xa2\xe6\x88\xb7\xe7\xab\xaf\r\
    \n\n\x0c\n\x05\x06\x01\x02\0\x01\x12\x038\x06\x18\n\x0c\n\x05\x06\x01\
    \x02\0\x02\x12\x038\x19'\n\x0c\n\x05\x06\x01\x02\0\x03\x12\x039\x0f\x1d\
    \n\x1b\n\x04\x06\x01\x02\x01\x12\x03:\x02?\"\x0e\xe8\xb8\xa2\xe5\x87\xba\
    \xe7\x94\xa8\xe6\x88\xb7\r\n\n\x0c\n\x05\x06\x01\x02\x01\x01\x12\x03:\
    \x06\x0f\n\x0c\n\x05\x06\x01\x02\x01\x02\x12\x03:\x10!\n\x0c\n\x05\x06\
    \x01\x02\x01\x03\x12\x03:,=\n\n\n\x02\x04\x08\x12\x04=\0@\x01\n\n\n\x03\
    \x04\x08\x01\x12\x03=\x08\x16\n&\n\x04\x04\x08\x02\0\x12\x03>\x02\x1d\"\
    \x19\xe9\x9c\x80\xe8\xa6\x81\xe8\xbd\xac\xe5\x8f\x91\xe7\x9a\x84\xe7\x94\
    \xa8\xe6\x88\xb7id\r\n\n\x0c\n\x05\x04\x08\x02\0\x04\x12\x03>\x02\n\n\
    \x0c\n\x05\x04\x08\x02\0\x05\x12\x03>\x0b\x10\n\x0c\n\x05\x04\x08\x02\0\
    \x01\x12\x03>\x11\x18\n\x0c\n\x05\x04\x08\x02\0\x03\x12\x03>\x1b\x1c\n\
    \x15\n\x04\x04\x08\x02\x01\x12\x03?\x02\x14\"\x08\xe6\xb6\x88\xe6\x81\
    \xaf\r\n\n\r\n\x05\x04\x08\x02\x01\x04\x12\x04?\x02>\x1d\n\x0c\n\x05\x04\
    \x08\x02\x01\x05\x12\x03?\x02\x07\n\x0c\n\x05\x04\x08\x02\x01\x01\x12\
    \x03?\x08\x0f\n\x0c\n\x05\x04\x08\x02\x01\x03\x12\x03?\x12\x13\n\n\n\x02\
    \x04\t\x12\x04B\0D\x01\n\n\n\x03\x04\t\x01\x12\x03B\x08\x16\n\x20\n\x04\
    \x04\t\x02\0\x12\x03C\x02\x1d\"\x13\xe6\x88\x90\xe5\x8a\x9f\xe7\x9a\x84\
    \xe7\x94\xa8\xe6\x88\xb7id\r\n\n\x0c\n\x05\x04\t\x02\0\x04\x12\x03C\x02\
    \n\n\x0c\n\x05\x04\t\x02\0\x05\x12\x03C\x0b\x10\n\x0c\n\x05\x04\t\x02\0\
    \x01\x12\x03C\x11\x18\n\x0c\n\x05\x04\t\x02\0\x03\x12\x03C\x1b\x1c\n\n\n\
    \x02\x04\n\x12\x04F\0H\x01\n\n\n\x03\x04\n\x01\x12\x03F\x08\x19\n\x17\n\
    \x04\x04\n\x02\0\x12\x03G\x02\x1d\"\n\xe7\x94\xa8\xe6\x88\xb7id\r\n\n\
    \x0c\n\x05\x04\n\x02\0\x04\x12\x03G\x02\n\n\x0c\n\x05\x04\n\x02\0\x05\
    \x12\x03G\x0b\x10\n\x0c\n\x05\x04\n\x02\0\x01\x12\x03G\x11\x18\n\x0c\n\
    \x05\x04\n\x02\0\x03\x12\x03G\x1b\x1c\n\n\n\x02\x04\x0b\x12\x04J\0L\x01\
    \n\n\n\x03\x04\x0b\x01\x12\x03J\x08\x19\n\x20\n\x04\x04\x0b\x02\0\x12\
    \x03K\x02\x1d\"\x13\xe6\x88\x90\xe5\x8a\x9f\xe7\x9a\x84\xe7\x94\xa8\xe6\
    \x88\xb7id\r\n\n\x0c\n\x05\x04\x0b\x02\0\x04\x12\x03K\x02\n\n\x0c\n\x05\
    \x04\x0b\x02\0\x05\x12\x03K\x0b\x10\n\x0c\n\x05\x04\x0b\x02\0\x01\x12\
    \x03K\x11\x18\n\x0c\n\x05\x04\x0b\x02\0\x03\x12\x03K\x1b\x1cb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
